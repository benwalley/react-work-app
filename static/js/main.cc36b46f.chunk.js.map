{"version":3,"sources":["AddButton.jsx","Task.jsx","EditWindow.jsx","App.js","serviceWorker.js","index.js"],"names":["AddButton","react_default","a","createElement","className","onClick","this","props","addTask","React","Component","Task","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handlePriorityChange","changeEvent","newData","data","priority","target","value","taskClass","setState","updateStorage","handleOpenEditWindow","openEditWindow","index","document","getElementById","focus","handleDelete","handleDragOver","event","preventDefault","handleDrop","extra","dragged","dataTransfer","getData","updatePositions","handleDragStart","setData","id","handleDragEnter","handleDragLeave","handleDontDrop","state","_this2","draggable","onDragOver","e","onDrop","onDragStart","title","type","name","checked","onChange","onDragEnter","onDragLeave","EditWindow","handleTaskUpdate","componentDidMount","toggleTime","handleToggleTime","handleTimeChange","htmlFor","description","status","link","href","note","hours","min","App","newTaskIndex","tasks","length","currentState","push","due","totalTime","timeRunning","timerClass","editWindowIndex","originalPos","newPos","newTasks","movingTask","splice","newEditIndex","stopTimer","i","task","console","log","currentTask","updateLocalStorage","stateData","JSON","stringify","window","localStorage","setItem","updateFromLocalStorage","appData","getItem","parse","toggleDarkMode","darkModeOn","darkModeToggleClass","appClass","componentDidUpdate","editWindowOpen","src_AddButton_0","map","src_Task_0","key","handleColorChange","src_EditWindow_0","closeEditWindow","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc36b46f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddButton.css';\r\n\r\n\r\nclass AddButton extends React.Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"add-task-button\" onClick={this.props.addTask}>\r\n        +\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddButton;","import React, { Component } from 'react';\r\nimport './Task.css';\r\n\r\n\r\nclass Task extends React.Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = this.props.data\r\n\t }\r\n\r\n\thandlePriorityChange = (changeEvent) => {\r\n\t\tlet newData = this.props.data;\r\n\t\tnewData.priority = changeEvent.target.value;\r\n\t\tnewData.taskClass = \"task \" + changeEvent.target.value;\r\n\t\tthis.setState({\r\n\t\t    data: newData\r\n\t\t});\r\n\r\n\t\tthis.props.updateStorage();\r\n\t};\r\n\r\n\thandleOpenEditWindow = () => {\r\n\t\tthis.props.openEditWindow(this.props.index);\r\n\t\tdocument.getElementById(\"title\").focus();\r\n\t}\r\n\r\n\thandleDelete = () => {\r\n\r\n\t\tthis.props.handleDelete(this.props.index)\r\n\t}\r\n\r\n\thandleDragOver = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\t// console.log(DataTransfer())\r\n\t}\r\n\r\n\thandleDrop = (event, extra) => {\r\n\t\tevent.preventDefault();\r\n\t\tvar dragged = event.dataTransfer.getData(\"Text\");\r\n\t\tlet target = this.props.index;\r\n\t\tthis.props.updatePositions(dragged, target);\r\n\t\t// Make sure there is not still a hover class\r\n\t\tlet newData = this.props.data;\r\n\t\tnewData.taskClass = \"task \" + this.props.data.priority;\r\n\t\tthis.setState({data: newData})\r\n\r\n\t}\r\n\r\n\thandleDragStart = (event) => {\r\n\t\tevent.dataTransfer.setData(\"Text\", event.target.id);\r\n\t}\r\n\r\n\thandleDragEnter = (event) => {\r\n\t\tlet newData = this.props.data;\r\n\t\tnewData.taskClass = \"task \" + this.props.data.priority + ' hovered';\r\n\t\tthis.setState({data: newData})\r\n\t}\r\n\r\n\thandleDragLeave =(event) => {\r\n\t\tlet newData = this.props.data;\r\n\t\tnewData.taskClass = \"task \" + this.props.data.priority;\r\n\t\tthis.setState({data: newData})\r\n\t}\r\n\r\n\thandleDontDrop = (event) => {\r\n\t\tevent.preventDefault()\r\n\t}\r\n\r\n  render() {\r\n    return (\r\n      <div draggable=\"true\"  onDragOver={(e)=>this.handleDragOver(e)} onDrop={(e)=>this.handleDrop(e, this.props.index)} onDragStart={(e) => this.handleDragStart(e)} className={this.props.data.taskClass} id={this.props.index}>\r\n     \r\n        <h2 className=\"title\" onDragOver={(e) => this.handleDontDrop (e)}>\r\n        \t{this.props.data.title}\r\n        </h2>\r\n        <div className=\"priority\" onDragOver={this.handleDontDrop}>\r\n        \t<input type=\"radio\" name=\"priority\" value=\"red\" className=\"redRadio\" checked={this.props.data.priority === \"red\"} onChange={this.handlePriorityChange}/>\r\n        \t<input type=\"radio\" name=\"priority\" value=\"yellow\" className=\"yellowRadio\" checked={this.props.data.priority === \"yellow\"} onChange={this.handlePriorityChange}/>\r\n        \t<input type=\"radio\" name=\"priority\" value=\"green\" className=\"greenRadio\" checked={this.props.data.priority === \"green\"} onChange={this.handlePriorityChange}/>\r\n        \t<input type=\"radio\" name=\"priority\" value=\"blue\" className=\"blueRadio\" checked={this.props.data.priority === \"blue\"} onChange={this.handlePriorityChange}/>\r\n        \t<input type=\"radio\" name=\"priority\" value=\"purple\" className=\"purpleRadio\" checked={this.props.data.priority === \"purple\"} onChange={this.handlePriorityChange}/>\r\n        </div>\r\n        <div className=\"delete\" onDragOver={(e) => this.handleDontDrop (e)} onClick={this.handleDelete}><i className=\"fas fa-trash-alt\"></i></div>  \r\n        <div className=\"cover\" onDragEnter={(e) =>this.handleDragEnter(e)} onDragLeave={(e) =>this.handleDragLeave(e)} onClick={this.handleOpenEditWindow}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport './EditWindow.css';\r\n\r\n\r\n\r\nclass EditWindow extends React.Component {\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\r\n    \tthis.state = {\r\n    \t\tdata: this.props.data\r\n    \t}\r\n  \t}\r\n\r\n\thandleTaskUpdate = (event) => {\r\n\t \tthis.props.handleTaskUpdate(event);\t\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t    document.getElementById(\"title\").focus();\r\n\t}\r\n\r\n\ttoggleTime = () => {\r\n\t\tthis.props.handleToggleTime(this.props.index);\r\n\t}\r\n\r\n\thandleTimeChange = (event) => {\r\n\t\tthis.props.handleTaskUpdate(event);\t\r\n\t}\r\n\r\n  render() {\r\n    return (\r\n    \t<div>\r\n      \t\t<div className=\"edit-window\">\r\n      \t\t\t<form>\r\n      \t\t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<h2 className=\"\">{this.props.data.title}</h2>\r\n\t      \t\t\t\t\r\n      \t\t\t\t</div>\r\n\t      \t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<label name=\"title\" htmlFor=\"title\">Title:</label>\r\n\t      \t\t\t\t<input type=\"text\" id=\"title\" value={this.props.data.title} onChange={this.handleTaskUpdate}/>\r\n\t      \t\t\t</div>\r\n\t      \t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<label name=\"description\" htmlFor=\"description\">Description:</label>\r\n\t      \t\t\t\t<input type=\"text\" id=\"description\" value={this.props.data.description} onChange={this.handleTaskUpdate}/>\r\n\t      \t\t\t</div>\r\n\t      \t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<label name=\"status\" htmlFor=\"status\">Status:</label>\r\n\t      \t\t\t\t<input type=\"text\" id=\"status\" value={this.props.data.status} onChange={this.handleTaskUpdate}/>\r\n\t      \t\t\t</div>\r\n\t      \t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<label name=\"link\" htmlFor=\"link\">link:</label>\r\n\t      \t\t\t\t<input type=\"text\" id=\"link\" value={this.props.data.link} onChange={this.handleTaskUpdate}/>\r\n\t      \t\t\t\t<a href={this.props.data.link} target=\"_blank_\">{this.props.data.link}</a>\r\n\t      \t\t\t</div>\r\n\t      \t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<label name=\"note\" htmlFor=\"note\">Notes:</label>\r\n\t      \t\t\t\t<textarea id=\"note\" value={this.props.data.note} onChange={this.handleTaskUpdate}/>\r\n\t      \t\t\t</div>\r\n\t      \t\t\t<div className=\"formSection\">\r\n\t      \t\t\t\t<h4>Time</h4>\r\n\t      \t\t\t\t<label name=\"hours\" htmlFor=\"hours\">Hr</label>\r\n\t      \t\t\t\t<input type=\"text\" id=\"hours\" value={this.props.data.hours} onChange={this.handleTaskUpdate}/>\r\n\r\n\t      \t\t\t\t<label name=\"min\" htmlFor=\"min\">Min</label>\r\n\t      \t\t\t\t<input type=\"text\" id=\"min\" value={this.props.data.min} onChange={this.handleTaskUpdate}/>\r\n\t      \t\t\t</div>\r\n      \t\t\t</form>\r\n      \t\t</div>\r\n      \t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditWindow;","import React, { Component } from 'react';\nimport AddButton from './AddButton.jsx';\nimport Task from './Task.jsx';\nimport EditWindow from './EditWindow.jsx';\n// import './grabbable.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [{title: \"\", priority: \"green\", due: \"\", timerClass: 'play-pause paused', timeRunning: false, description: \"\", status: \"\", note: \"\", hours: 0, min: 0, totalTime: 0, link: \"\", taskClass: 'task green'}],\n      editWindowOpen: false,\n      editWindowIndex: 0,\n      darkModeOn: false,\n      appClass: 'App',\n      darkModeToggleClass: 'toggle'\n    }\n  }\n\n\n  addTask = () => {\n    let newTaskIndex = this.state.tasks.length;\n    let currentState = this.state.tasks;\n    currentState.push({\n      title: \"\",\n      priority: \"green\",\n      due: \"\",\n      description: \"\",\n      status: \"\",\n      note: \"\",\n      taskClass: 'task green',\n      link: \"\",\n      hours: 0,\n      min: 0,\n      totalTime: 0,\n      timeRunning: false,\n      timerClass: \"play-pause paused\"\n    })\n    this.setState({tasks: currentState});\n    this.setState({editWindowIndex: newTaskIndex});\n    document.getElementById(\"title\").focus();\n  }\n\n  openEditWindow = (index) => {\n    this.setState({editWindowIndex: index})\n  }\n\n  updatePositions = (originalPos, newPos) => {\n    let newTasks = this.state.tasks;\n    let movingTask = newTasks[originalPos]\n    newTasks.splice(originalPos, 1);\n    newTasks.splice(newPos, 0, movingTask)\n    this.setState({tasks: newTasks});\n  }\n\n  handleDelete = (index) => {\n    let tasks = this.state.tasks;\n    tasks.splice(index, 1)\n    this.setState({tasks: tasks})\n    if(index === 0) {\n      var newEditIndex = 0;\n    } else {\n      var newEditIndex = index - 1;\n    }\n    this.setState({editWindowIndex: newEditIndex})\n    // if there are no more tasks, create an empty one\n    if(this.state.tasks.length === 0) {\n      this.addTask();\n    }\n  }\n\n  stopTimer = (index) => {\n    var tasks = this.state.tasks;\n    tasks[index].timeRunning = false;\n    tasks[index].timerClass = \"play-pause paused\"\n  }\n\n  handleToggleTime = (index) => {\n    for (var i = 0; i < this.state.tasks.length; i++) {\n      this.stopTimer(i);\n    }\n    var task = this.state.tasks;\n    console.log(index)\n    if(task[index].timeRunning) {\n      task[index].timeRunning = false\n      task[index].timerClass = \"play-pause paused\"\n    } else {\n      task[index].timeRunning = true\n      task[index].timerClass = \"play-pause playing\"\n    }\n\n    this.setState({tasks: task})\n  }\n\n  handleTaskUpdate = (event) => {\n    let currentTask = this.state.editWindowIndex;\n    let tasks = this.state.tasks;\n\n    tasks[currentTask][event.target.id] = event.target.value\n    this.setState({tasks: tasks});\n\n    this.updateLocalStorage()\n  }\n\n  updateLocalStorage = () => {\n    let stateData = JSON.stringify(this.state);\n    let storage = window.localStorage;\n    storage.setItem(\"myTasks\", stateData)\n  }\n\n  updateFromLocalStorage = () => {\n    let storage = window.localStorage;\n    let appData = storage.getItem('myTasks');\n    appData = JSON.parse(appData);\n    this.setState(appData);\n  }\n\n  componentDidMount() {\n    let storage = window.localStorage;\n    let appData = storage.getItem('myTasks');\n    if(appData) {\n      this.updateFromLocalStorage()\n    }\n  }\n\n  toggleDarkMode = () => {\n    if(this.state.darkModeOn) {\n      this.setState({darkModeOn: false})\n      this.setState({darkModeToggleClass: 'toggle off'});\n      this.setState({appClass: 'App'})\n    } else {\n      this.setState({darkModeOn: true})\n      this.setState({darkModeToggleClass: 'toggle on'});\n      this.setState({appClass: 'App dark'})\n    }\n  }\n\n  componentDidUpdate = () => {\n    this.updateLocalStorage()\n  }\n\n  render() {\n    return (\n      <div className={this.state.appClass}>\n        <div className=\"main-container\">\n          <div className='dark-mode-control'>\n          <label>\n            Dark mode\n          </label>\n          <div onClick={this.toggleDarkMode} className={this.state.darkModeToggleClass}></div>\n        </div>\n        <AddButton addTask = {this.addTask}/>\n        {this.state.tasks.map((task, index) => {\n          return <Task key={ index } index={index} handleDelete={this.handleDelete} updatePositions={this.updatePositions} openEditWindow={this.openEditWindow} data={this.state.tasks[index]} handleColorChange={this.handleColorChange} updateStorage={this.updateLocalStorage}/>\n        })}\n        <EditWindow handleToggleTime={this.handleToggleTime} closeEditWindow = {this.closeEditWindow} data={this.state.tasks[this.state.editWindowIndex]} handleTaskUpdate={this.handleTaskUpdate} index={this.state.editWindowIndex}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}